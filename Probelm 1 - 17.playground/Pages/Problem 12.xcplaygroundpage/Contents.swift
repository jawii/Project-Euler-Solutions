import Foundation

// Problem 12 Highly Divisible Triangular number

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/


//print(calculateDivisorsCount(number: 1000000))
//print(divisorCount(forNumber: 1000000))


var start = 1
var triangleNumber = 0
var flag = true

while flag {
	triangleNumber += start
	print("Checking number: \(triangleNumber)")
	// calculate divisors
	let divisors = divisorCount(forNumber: triangleNumber)
	
	if divisors >= 500 {
		flag = false
		print("TriangleNumber: \(triangleNumber) has \(divisors) divisors")
	}
	
	start += 1
}



// Below is not so efficient because of the prime number generator
func calculateDivisorsCount(number: Int) -> Int {
	
	if number == 1 { return 1 }
	if number == 2 { return 2 }
	if number == 3 { return 2 }
	
	let primes = getAllPrimesBelow(number: number)
	
	var numberCopy = number
	var primeFactors = [Int: Int]()
	
	for prime in primes {
		if numberCopy < prime { continue }
		while numberCopy % prime == 0 {
			if let oldValue = primeFactors[prime] {
				primeFactors[prime] = oldValue + 1
			} else {
				primeFactors[prime] = 1
			}
			numberCopy = numberCopy / prime
			
			if numberCopy == 1 {
				break
			}
		}
	}
	
	var divisors = 1
	primeFactors.values.forEach { key in
		divisors *= (key + 1)
	}
	return divisors
}
